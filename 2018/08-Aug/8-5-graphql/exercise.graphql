# Author: Andrew Jarombek
# Date: 8/3/2018
# GraphQL Definition for Exercise types

# Scalar types resolve to concrete data.  GraphQL has built in scalar types, however
# you are free to build your own
scalar Date

# GraphQL allows for abstract types that other concrete types can implement
interface Exercise {
    id: ID!
    name: String!
    user: String!
    description: String
    date: Date!
}

# Enums in GraphQL are restricted sets of values
enum CardioType {
    RUN
    BIKE
    SWIM
    SKI
    HIKE
}

enum StrengthType {
    CORE
    LIFT
    OTHER
}

# A concrete type that implements the exercise interface.  This exercise type is cardio specific
type Cardio implements Exercise {
    id: ID!
    name: String!
    user: String!
    description: String
    date: Date!
    distance: Float
    minutes: Int
    seconds: Int
    type: CardioType!
}

# A concrete type that implements the exercise interface.  This exercise type is strength specific
type Strength implements Exercise {
    id: ID!
    name: String!
    user: String!
    description: String
    date: Date!
    workouts: [String]!
    type: StrengthType!
}

# Input types are used with mutations to pass an entire object into the mutation
input ExerciseInput {
    name: String!
    user: String!
    description: String
    date: Date!
}

input CardioInput {
    name: String!
    user: String!
    description: String
    date: Date!
    distance: Float
    minutes: Int
    seconds: Int
    type: CardioType
}

input StrengthInput {
    name: String!
    user: String!
    description: String
    date: Date!
    workouts: [String]!
    type: StrengthType
}